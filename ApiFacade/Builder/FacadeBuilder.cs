using System;
using System.Globalization;

namespace ApiFacade.Builder
{
    public abstract class FacadeBuilder 
    {
        private readonly FacadeClass _class;
        private readonly FacadeStringBuilder _builder;

        protected FacadeBuilder(FacadeClass Class)
        {
            this._class = Class;
            this._builder = new FacadeStringBuilder();
        }

        public string Build()
        {

            this.SetIndentation(0);
            this.AppendUsings();

            this.SetIndentation(1);
            this.AppendComments();
            this.DefineClass();

            this.SetIndentation(2);
            this.DefineWrappers();

            this.SetIndentation(1);
            this.CloseBracket();

            this.SetIndentation(0);
            this.CloseBracket();

            return _builder.ToString();
        }

        private void AppendUsings() 
        {
            for(var i = 0; i < _class.Usings.Length; i++) 
            {
                _builder.AppendLine($"using {_class.Usings[i]};");
            }
            _builder.AppendLine(string.Empty);
            _builder.AppendLine($"namespace {FacadeClass.Namespace}");
            _builder.AppendLine("{");
        }

        private void AppendComments() 
        {
            _builder.AppendLine("/*");
            _builder.AppendLine($"* Created {DateTime.Now.ToString(CultureInfo.CurrentCulture)}");
            _builder.AppendLine("* This code was automatically generated by api-facade");
            _builder.AppendLine("* https://github.com/Zaphyk/api-facade");
            _builder.AppendLine("*/");
        }

        protected virtual void DefineClass() 
        {
            _builder.Append($"{_class.ClassModifier ?? string.Empty} class {_class.Name} ");
            if(_class.Parent != null)
            {
                _builder.Append($": {_class.Parent.Name}");    
            }
            _builder.AppendLine(string.Empty);
            _builder.AppendLine("{");
        }

        protected virtual void DefineWrappers()
        {

        }

        private void CloseBracket()
        {
            _builder.AppendLine("}");
        }

        private void SetIndentation(int Level)
        {
            _builder.IndentationLevel = Level;
        }
    }
}