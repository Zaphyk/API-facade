using System;
using System.Collections.Generic;
using System.Globalization;
using ApiFacade.Parser;
using ApiFacade.Writer.Method;

namespace ApiFacade.Writer
{
    public abstract class FacadeClassWriter 
    {
        protected static Dictionary<MethodWriterType, Type> MethodWriters { get; }
        protected FacadeClass Class { get; }
        protected FacadeStringWriter Writer { get; }

        static FacadeClassWriter()
        {
            MethodWriters = new Dictionary<MethodWriterType, Type>
            {
                {MethodWriterType.Normal, typeof(FacadeNormalMethodWriter)},
                {MethodWriterType.Abstract, typeof(FacadeAbstractMethodWriter)},
                {MethodWriterType.Virtual, typeof(FacadeVirtualMethodWriter)},
                {MethodWriterType.Static, typeof(FacadeStaticMethodWriter)},
            };
        }

        protected FacadeClassWriter(FacadeClass Class)
        {
            this.Class = Class;
            this.Writer = new FacadeStringWriter();
        }

        public string Build()
        {

            this.SetIndentation(0);
            this.AppendUsings();

            this.SetIndentation(1);
            this.AppendClassComments();
            this.DefineClass();

            this.SetIndentation(2);
            this.DefineConstructor();
            this.DefineMethods();

            this.SetIndentation(1);
            this.CloseBracket();

            this.SetIndentation(0);
            this.CloseBracket();

            return Writer.ToString();
        }

        private void AppendUsings() 
        {
            for(var i = 0; i < Class.Usings.Length; i++) 
            {
                Writer.AppendLine($"using {Class.Usings[i]};");
            }
            Writer.AppendLine($"using {Class.ParentNamespace};");
            Writer.AppendLine($"using {FacadeClass.ParentNamespaceName} = {Class.ParentNamespace};");
            Writer.AppendLine(string.Empty);
            Writer.AppendLine($"namespace {FacadeClass.Namespace}");
            Writer.AppendLine("{");
        }

        private void AppendClassComments() 
        {
            Writer.AppendLine("/*");
            Writer.AppendLine($"* Created {DateTime.Now.ToString(CultureInfo.CurrentCulture)}");
            Writer.AppendLine("* This class was automatically generated by api-facade");
            Writer.AppendLine("* https://github.com/Zaphyk/api-facade");
            Writer.AppendLine("*/");
        }
        private void AppendFunctionComments()
        {
            Writer.AppendLine("/*");
            Writer.AppendLine("* This method was automatically generated by api-facade");
            Writer.AppendLine("*/");
        }


        protected virtual void DefineClass() 
        {
            Writer.Append(ClassDeclaration);
            Writer.AppendLine(string.Empty);
            Writer.AppendLine("{");
        }

        protected virtual void DefineConstructor()
        {
            if(Class.Type == FacadeType.Static) return;
            for (var i = 0; i < Class.Constructors.Length; i++)
            {
                this.AppendFunctionComments();
                var methodWriter = new FacadeConstructorWriter(Class, Class.Constructors[i]);
                methodWriter.Write(Writer);
                Writer.AppendLine(string.Empty);
            }
        }

        protected virtual void DefineMethods()
        {
            for (var i = 0; i < Class.Methods.Length; i++)
            {
                var methodWriter = (FacadeMethodWriter) Activator.CreateInstance(MethodWriters[Class.Methods[i].Type], Class, Class.Methods[i]);
                this.AppendFunctionComments();
                methodWriter.Write(Writer);
                if(i < Class.Methods.Length-1) Writer.AppendLine(string.Empty);
            }
        }

        private void CloseBracket()
        {
            Writer.AppendLine("}");
        }

        private void SetIndentation(int Level)
        {
            Writer.IndentationLevel = Level;
        }

        protected virtual string ClassDeclaration => $"{Class.ClassModifier ?? string.Empty} class {Class.Name} ";
    }
}