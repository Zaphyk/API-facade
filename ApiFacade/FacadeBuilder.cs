using System;
using System.Text;

namespace ApiFacade 
{
    public class FacadeBuilder 
    {
        private static readonly string DefaultComment = $"/*{Environment.NewLine}* This code was automatically generated by api-facade{Environment.NewLine}* https://github.com/Zaphyk/api-facade {Environment.NewLine}*/";
        private readonly FacadeClassData _data;

        public FacadeBuilder(FacadeClassData Data)
        {
            this._data = Data;
        }

        public string Build()
        {
            var builder = new FacadeStringBuilder();
            builder.IndentationLevel = 0;
            this.AppendUsings(builder);
            builder.IndentationLevel = 1;
            this.AppendComments(builder);
            this.DefineClass(builder);
            builder.IndentationLevel = 2;
            this.DefineWrappers(builder);
            builder.IndentationLevel = 1;
            this.CloseBracket(builder);
            builder.IndentationLevel = 0;
            this.CloseBracket(builder);
            return builder.ToString();
        }

        private void AppendUsings(FacadeStringBuilder Builder) 
        {
            for(var i = 0; i < _data.Usings.Length; i++) 
            {
                Builder.AppendLine($"using {_data.Usings[i]};{Environment.NewLine}");
            }
            Builder.AppendLine($"namespace {_data.Namespace}{Environment.NewLine}{{");
        }

        private void AppendComments(FacadeStringBuilder Builder) 
        {
            Builder.AppendLine(DefaultComment);
        }

        private void DefineClass(FacadeStringBuilder Builder) 
        {
            Builder.Append($"public {_data.ClassModifier ?? string.Empty} class {_data.Name} ");
            if(_data.Parent != null)
            {
                Builder.Append($": {_data.Parent.Name}");    
            }
            Builder.AppendLine($"{Environment.NewLine}{{");
        }

        private void DefineWrappers(FacadeStringBuilder Builder)
        {
            
        }

        private void CloseBracket(FacadeStringBuilder Builder)
        {
            Builder.AppendLine("}");
        }
    }
}